{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About categories: [links, personal, nearby.cafe] Personal Blog I used to write items to this blog, but like almost all blogs it is redundant now. Twitter LinkedIn Stackoverflow MS Certification Nearby.Cafe Nearby.cafe is a site I use to learn technologies. It gets the users location, and shows them the nearest cafes. hosted on azure uses cosmosDb to store the location of every cafe in the world cafe locations were sourced from openstreetmap uses react as the frontend framework uses asp.net and c# on the server side.","title":"About"},{"location":"#about","text":"categories: [links, personal, nearby.cafe] Personal Blog I used to write items to this blog, but like almost all blogs it is redundant now. Twitter LinkedIn Stackoverflow MS Certification","title":"About"},{"location":"#nearbycafe","text":"Nearby.cafe is a site I use to learn technologies. It gets the users location, and shows them the nearest cafes. hosted on azure uses cosmosDb to store the location of every cafe in the world cafe locations were sourced from openstreetmap uses react as the frontend framework uses asp.net and c# on the server side.","title":"Nearby.Cafe"},{"location":"Posts/moveing-to-mkdocs/","text":"Moving To Mkdocs I found mkdocs, and started using it professionally. I liked it so much I am moving this blog to mkdocs. Specifically mkdocs with the material theme.","title":"Moving To Mkdocs"},{"location":"Posts/moveing-to-mkdocs/#moving-to-mkdocs","text":"I found mkdocs, and started using it professionally. I liked it so much I am moving this blog to mkdocs. Specifically mkdocs with the material theme.","title":"Moving To Mkdocs"},{"location":"Posts/Old%20Blog%20Posts/2019-12-01-new-phone/","text":"I just bought a new phone layout: post title: I just bought a new phone categories: [Phone, tech, personal] A Motorola G8 Plus I have ordered it, so I dont have it in my hands.","title":"I just bought a new phone"},{"location":"Posts/Old%20Blog%20Posts/2019-12-01-new-phone/#i-just-bought-a-new-phone","text":"layout: post title: I just bought a new phone categories: [Phone, tech, personal]","title":"I just bought a new phone"},{"location":"Posts/Old%20Blog%20Posts/2019-12-01-new-phone/#a-motorola-g8-plus","text":"I have ordered it, so I dont have it in my hands.","title":"A Motorola G8 Plus"},{"location":"Posts/Old%20Blog%20Posts/2019-12-02-Buyme-a-coffee/","text":"Added a buy me a coffee widget I have just added a buy me a coffee widget to the index page. I had to go and re-enable the very old paypal account. I never like using paypal, so we will see how that goes. I guess this is ethicly better than having advertising on the site. I would like to research how much anybody ever gets from a buy-me-a-coffe process. Very little I suspect. Prove me wrong!","title":"Buy me a coffee"},{"location":"Posts/Old%20Blog%20Posts/2019-12-02-Buyme-a-coffee/#added-a-buy-me-a-coffee-widget","text":"I have just added a buy me a coffee widget to the index page. I had to go and re-enable the very old paypal account. I never like using paypal, so we will see how that goes. I guess this is ethicly better than having advertising on the site. I would like to research how much anybody ever gets from a buy-me-a-coffe process. Very little I suspect. Prove me wrong!","title":"Added a buy me a coffee widget"},{"location":"Posts/Old%20Blog%20Posts/2019-12-08-read-file-csharp/","text":"I have an rss feed that I want to read and process. Opening an reading this file in C# is a one line command. Well 3 lines if you want it to be any use. {% highlight csharp %} string fileLocation = @\"D:\\export.rss\"; string textFromFile = System.IO.File.ReadAllText(fileLocation); Console.WriteLine(\"Contents of {0} = {1}\", fileLocation, textFromFile);","title":"Reading a file in C# is so easy."},{"location":"Posts/Old%20Blog%20Posts/2019-12-08-read-file-csharp/#_1","text":"I have an rss feed that I want to read and process. Opening an reading this file in C# is a one line command. Well 3 lines if you want it to be any use. {% highlight csharp %} string fileLocation = @\"D:\\export.rss\"; string textFromFile = System.IO.File.ReadAllText(fileLocation); Console.WriteLine(\"Contents of {0} = {1}\", fileLocation, textFromFile);","title":""},{"location":"Posts/Old%20Blog%20Posts/2019-12-10-Collection-of-checkboxes-dot-net-core/","text":"Nested checkboxes problem for asp.net mvc I have a viewmodel that has a collection of items, some of those items are bool values that I want to set with checkboxes in the UI. On submit I want to process the checkbox values server side. First create a .Net Core web application. For this explanation I have created two classes Parent and child. Parent has many children. {% highlight csharp %} public class Parent { public Parent() { Children = new List<Child>(); } public string Name { get; set; } public List<Child> Children { get; set; } } public class Child { public Child() { } public string Thing { get; set; } public bool ThisIsSet { get; set; } } {% endhighlight %} You can see that the Child class has a property called ThisIsSet that is a boolean. The HomeController Index Method instantiates a Parent class, populates it with test data and passes that ViewModel down to the UI. {% highlight csharp %} public IActionResult Index() { Parent parent = new Parent(); Child A = new Child() { Thing = \"A\", ThisIsSet = false }; Child B = new Child() { Thing = \"B\", ThisIsSet = false }; parent.Children.Add(A); parent.Children.Add(B); return View(parent); } {% endhighlight %} The View, Index.cshtml under the Home directory received this ViewModel. @model WebApplication1.Controllers.Parent @{ ViewData[\"Title\"] = \"Index\"; } <h1>Index</h1> <h4>Parent</h4> <hr /> <div class=\"row\"> <div class=\"col-md-4\"> <form asp-action=\"Create\"> <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div> <div class=\"form-group\"> <label asp-for=\"Name\" class=\"control-label\"></label> <input asp-for=\"Name\" class=\"form-control\" /> <span asp-validation-for=\"Name\" class=\"text-danger\"></span> </div> @for (int i = 0; i < Model.Children.Count; i++) { <label asp-for=\"@Model.Children[i].Thing\" class=\"control-label\"></label> <input asp-for=\"@Model.Children[i].Thing\" class=\"form-control\" /> <label asp-for=\"@Model.Children[i].ThisIsSet\" class=\"control-label\"></label> <input asp-for=\"@Model.Children[i].ThisIsSet\" class=\"form-control\" /> } <div class=\"form-group\"> <input type=\"submit\" value=\"Create\" class=\"btn btn-primary\" /> </div> </form> </div> </div> There are some special things happening in this view that we do not normally see. The Children collection is processed using a for loop and a counter, rather than using a foreach loop. This is so we can use the counter to reference the items in the Chilren collection. We also have to use the asp-for notation so that the values are populated in the form values that are sent back to the server. For values that dont need to be displayed you can add the attribute type=hidden. This form will POST back to a Create method on the HomeController. {% highlight csharp %} public IActionResult Create(IFormCollection formValues) { Parent p = ToParent(formValues); StringBuilder sb = new StringBuilder(); sb.Append(\"start \"); foreach(var c in p.Children) { sb.Append($\"Thing is {c.Thing} and {c.ThisIsSet} \"); } return RedirectToAction(\"Index2\", new { message = sb.ToString() }); } {% endhighlight %} This methods has a function ToParent that takes an IFormCollection and generates a Parent from it. The Parent class doesn't HAVE to be the output type but in this instance it helps us to understand what is going on. Not that we have to use an IFormCollection not a FormCollection. {% highlight csharp %} private Parent ToParent(IFormCollection formCollection) { var model = new Parent(); model.Name = formCollection[\"name\"]; List<Child> itemList = new List<Child>(); int i = 0; while (!string.IsNullOrEmpty(formCollection[\"Children[\" + i + \"].Thing\"])) { Child c = new Child(); c.Thing = formCollection[\"Children[\" + i + \"].Thing\"]; var x = formCollection[\"Children[\" + i + \"].ThisIsSet\"]; c.ThisIsSet = Convert.ToBoolean(x[0]); itemList.Add(c); i++; } model.Children = itemList; return model; } {% endhighlight %} Processing this IFormCollection is just horrible. If you inspect it in the debugger its a list of key value pairs which would work well for a flat simple object. But we have a collection. And there is this awful way of getting to the values in the collection. And the big suprise is that the checkbox does not come back as a {true}, {false} value. But a selected checkbox comes back as {true, false} and an unchecked box comes back as {false}, so the first value in that object represents the status, that's why we have to pick the first element from the array x. The rest of the Create method is just for debugging, it creates a message that is then displayed.","title":"Nested checkboxes problem for asp.net mvc"},{"location":"Posts/Old%20Blog%20Posts/2019-12-12-making-contacts-db/","text":"Create a contact manager in a local db This is going to use electon, and sqlLite. It should work across windows and linux. Create a nice fresh directory somewhere. Navigate to that directory in a command window. Open your browser and navigate to patrickmoffitt/local-sqlite-example because we are going to cheat a lot. Click the 'clone or download' button. copy that url (https://github.com/patrickmoffitt/local-sqlite-example.git) Switch to your command window type in 'git clone ' and paste the url. Hit enter. git clone https://github.com/patrickmoffitt/local-sqlite-example.git That should download a whole lot of stuff. There will be a directory called : local-sqllite-example Navigate to that directory. In there will be a file called package.json You need to install electron. Stay in the same root directory where the package.json file is. npm install electron --save-dev This will install electron. More stuff. Start the application. npm start This will create a sqlLite database, and it will tell you where it is installed, with a line in the command window. A user interface should appear. That allows you to enter names, edit names and delete names. That is a very very basic start. See next post - How to make it more useful, by adding address, notes etc.","title":"Create a contact manager in a local db"},{"location":"Posts/Old%20Blog%20Posts/2019-12-14-package-electron/","text":"We need the install a packager. Create a directory called 'build' in the root directory of the application we have just been working on. Stay in that directory where the package.json file is. npm install electron-builder --save-dev We need to edit the package.json file. If you have VSCode installed just type code . select the package.json for edit.","title":"Package an electron app"},{"location":"Posts/Old%20Blog%20Posts/2020-01-08-dotnet-corecoverlet/","text":"Measuring .NET Core Test Coverage with Coverlet dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=\"[xunit*]\\*\" /p:CoverletOutput=\"./TestResults/\" dotnet reportgenerator \"-reports:TestResults\\coverage.cobertura.xml\" \"-targetdir:TestResults\\html\" -reporttypes:HTML;","title":"Measuring .NET Core Test Coverage with Coverlet"},{"location":"Posts/Old%20Blog%20Posts/2020-01-13-Mocking-httpcontext-dotnetcore/","text":"Make sure the reference to httpcontext is moved into some service. That service is injected into the controller. And can therefore be mocked. add services.AddSingleton\\<IHttpContextAccessor, HttpContextAccessor>(); to the startup.cs ConfigureServices method. then public class UserService : IUserService { private readonly IHttpContextAccessor _httpContextAccessor; public UserService(IHttpContextAccessor httpContextAccessor) { _httpContextAccessor = httpContextAccessor; } public bool IsUserLoggedIn() { var context = _httpContextAccessor.HttpContext; return context.User.Identities.Any(x => x.IsAuthenticated); } }","title":"Mocking httpcontext in dotnet core"},{"location":"Posts/Old%20Blog%20Posts/2020-05-13-Mocking-BeginTransation/","text":"Somewhere deep in your data access code you have. using (var transaction = _unitOfWork.DbConnection.BeginTransaction()) { await _unitOfWork.SomeRepository.Delete(id).ConfigureAwait(false); await _unitOfWork.SomeRepository.DeleteSomethingElse(id).ConfigureAwait(false); transaction.Commit(); } The details in the transaction are not important. Mocking the Delete and the DeleteSomethingElse method is easy enough, but its wrapped in a transaction. So how do we get to mock that using MOQ in our unit test? var mockUnitOfWork = new Mock<IUnitOfWork>(); mockUnitOfWork.Setup(uow => uow.DbConnection.BeginTransaction()) .Returns(new Mock<DbTransaction>().Object);","title":"Mocking BeginTransation() in Dapper and MOQ"},{"location":"Posts/Old%20Blog%20Posts/2020-07-08-GraphQL-DotNet-Core-Dapper-Postgresql/","text":"There are many examples of how to set up graphql for dotnet connecting to a SQL Server db through Entity Framework, but no where could I find an example using dapper. Also all the examples and tutorials had a simple select from a single table, no mention of how to create joins and complex queries. Also many of the examples did not cover fully how to perform dependency injection of the data acces layer, I will cover that. I used the following libraries. I am using dapper as the ORM The graphql library graphql-dotnet The UI interface GraphiQl Create a GraphQL type for each table that you wish to include in the queries. You almost certainly have these setup as DTO's already. A simple AccountCode dto. namespace somenamespace.Common.Models { public class AccountCode { public int Id { get; set; } public int Code { get; set; } } } I recomend you create a seperate folder for this graphql related code. The GraphQl Type for this is: using GraphQL.Types; using somenamespace.Common.Models; using somenamespace.Db.Data; namespace somenamespace.WebApi.Graphql { public class AccountCodeType : ObjectGraphType<AccountCode> { private readonly IUnitOfWork _unitOfWork; public AccountCodeType(IUnitOfWork unitOfWork) { _unitOfWork = unitOfWork; Name = \"AccountCode\"; Field(x => x.Id, type: typeof(IdGraphType)).Description(\"The ID of the Account Code\"); Field(x => x.Code).Description(\"The Account Code\"); Field<ListGraphType<AccountCodeMappingType>>( \"mappings\", resolve: context => _unitOfWork.AccountCodeMappingRepository.GetAccountCodeMappingByAccountCodeId( context.Source.Id)); } } } In this example the unitOfWork is equivalent the the entity framework context, that is the link to dapper. The \"mappings\" field is how we perform the joint between the AccountCode and the AccountCodeMapping table. What is important here is the was we get the id into the query that is used in the repository, we use context.Source.Id This will take the value from the Id field and use it as a parameter in the repository query GetAccountCodeMappingByAccountCodeId. Each type has to be registered as a service in Startup.cs services.AddSingleton<AccountCodeType>(); Create a top level query class to handle simple get all contents queries from tables. using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using GraphQL.Types; using somenamespace.Mapping.Db.Data; namespace somenamespace.WebApi.Graphql { public class OpenQuery : ObjectGraphType { private readonly IUnitOfWork _unitOfWork; public OpenQuery(IUnitOfWork unitOfWork) { _unitOfWork = unitOfWork; Field<ListGraphType<AccountCodeType>>( \"AccountCodes\", arguments: new QueryArguments( new QueryArgument<IntGraphType> { Name = \"code\" }), resolve: context => { int codeArgument = context.GetArgument<int>(\"code\"); var accountcodes = _unitOfWork.AccountCodeRepository.List(codeArgument); return accountcodes; } ); } } } This means we can select everything from the accountCode table. Also we have a way to filter on the code. Register that in the startup.cs as well services.AddTransient<OpenQuery>(); Next create a Schema file that contains this query. using GraphQL; using GraphQL.Types; namespace somenamespace.WebApi.Graphql { public class MappingSchema : Schema { public MappingSchema(IDependencyResolver resolver) : base(resolver) { Query = resolver.Resolve<OpenQuery>(); } } } And add that to the startup.cs services.AddSingleton<ISchema, MappingSchema>(); Next we need to create the actual graphql controller under the controller folder as usual. using System; using System.Threading.Tasks; using GraphQL; using Microsoft.AspNetCore.Mvc; using somenamespace.Mapping.Db.Data; using somenamespace.Mapping.WebApi.Graphql; namespace Uksbs.Gfs.Mapping.WebApi.Controllers { [Route(\"graphql\")] [ApiController] public class GraphqlController : ControllerBase { private readonly IUnitOfWork _unitOfWork; private readonly IDependencyResolver _resolver; public GraphqlController(IDependencyResolver resolver, IUnitOfWork unitOfWork) { _resolver = resolver; _unitOfWork = unitOfWork; } [HttpPost] public async Task<ActionResult> Post([FromBody] GraphQLQuery query) { var inputs = query.Variables.ToInputs(); var schema = new MappingSchema(_resolver); var result = await new DocumentExecuter().ExecuteAsync(_ => { _.Schema = schema; _.Query = query.Query; _.OperationName = query.OperationName; _.Inputs = inputs; }); if (result.Errors?.Count > 0) { return BadRequest(); } return Ok(result); } } } See that resolver there, guess what, add it to the startup.cs, and the schema file as well while you are there. services.AddSingleton<IDependencyResolver>(s => new FuncDependencyResolver(s.GetRequiredService)); services.AddSingleton<ISchema, MappingSchema>(); Just a couple more things to register in startup and we should be ready to go. In the Configure method of startup.cs add the following: app.UseGraphiQl(\"/graphql\"); I ended up adding it as the very first line, putting it further along in the process didnt work. I think thats it, point the browser at the root and add '/graphql' and you should get a GraphIql interface that alows you to create queries. References Web pages I referenced to get this done. * Build a GraphQL API with ASP.NET Core I used this to get the syntax for the graphql types. Its using EF and they get roud the injection issue by having a simple query and taking the db context that gets injected into the controller. Its too simple, but its a start. * The No Bullsh*t guide to GraphQL in .Net Core Now this guy realy did get me going, specificaly arounf what needed to be added to startup.cs to register the types. He uses a different UI component. This is from medium so you may not be able to read it but the github repo is here The Sneaker Shop GitHub Repo Ignore the frontend parts. From this I realised I could have several top level queries, and I like they way these are named. So there is an \"Open\" query that has open access, and a \"Restricted\" query with restricted access. This is also where I got the iinformation on how to get that dapper UnitOfWork injected into the query using the IDependencyResolver in the OpenSchema class.","title":"How to set up GraphQl for Dotnet core with Dapper and Postgresql"},{"location":"Posts/Old%20Blog%20Posts/2020-07-08-GraphQL-DotNet-Core-Dapper-Postgresql/#references","text":"Web pages I referenced to get this done. * Build a GraphQL API with ASP.NET Core I used this to get the syntax for the graphql types. Its using EF and they get roud the injection issue by having a simple query and taking the db context that gets injected into the controller. Its too simple, but its a start. * The No Bullsh*t guide to GraphQL in .Net Core Now this guy realy did get me going, specificaly arounf what needed to be added to startup.cs to register the types. He uses a different UI component. This is from medium so you may not be able to read it but the github repo is here The Sneaker Shop GitHub Repo Ignore the frontend parts. From this I realised I could have several top level queries, and I like they way these are named. So there is an \"Open\" query that has open access, and a \"Restricted\" query with restricted access. This is also where I got the iinformation on how to get that dapper UnitOfWork injected into the query using the IDependencyResolver in the OpenSchema class.","title":"References"},{"location":"Posts/Old%20Blog%20Posts/2020-07-31-localhost-ssl/","text":"NET::ERR_CERT_AUTHORITY_INVALID Out of the blue I started getting this error when running localhost. Previously I was getting warnings about the ssl certificate. The answer for edge at least is to go to enter the following in the url edge://flags/#allow-insecure-localhost and set Allow invalid certificates for resources loaded from localhost. enabled. Thanks go to Matt Smith","title":"ssl issues running localhost"},{"location":"Posts/Old%20Blog%20Posts/2020-07-31-localhost-ssl/#neterr_cert_authority_invalid","text":"Out of the blue I started getting this error when running localhost. Previously I was getting warnings about the ssl certificate. The answer for edge at least is to go to enter the following in the url edge://flags/#allow-insecure-localhost and set Allow invalid certificates for resources loaded from localhost. enabled. Thanks go to Matt Smith","title":"NET::ERR_CERT_AUTHORITY_INVALID"},{"location":"Posts/Old%20Blog%20Posts/2020-09-22-link-hero/","text":"Getting automation test failures this morning. So given some Xpath to find an element, how can I verify that the xpath works on the page. The answer is provided in Yi Zeng's Blog . Bring up the dev tools in the browser. If you are on the elements pannel, just type in the xpath in the search pannel. From the console wrap the xpath in $s(\"somexpath\"). Interestingly this can also be used for css.","title":"Debugging xpath in the browser"},{"location":"Posts/Old%20Blog%20Posts/2020-12-03-link-hero2/","text":"Tomek Su\u0142kowski has shown us a way to make console.log messages stand out in the browser console. If you add '%c' at the begining of the log message, or anywhere in the message, and then add additional css strings as parameters to the console.log() each additional parameter will format the message with the css you have provided. For reference see - Tomek Su\u0142kowski's Blog . so console.log( '%c Demo status: %c loaded ', background: #6f6; color: #000; padding: 4px; border-radius: 2px ); Will display the message in the console with a nice green background.","title":"Make console.log messages stand out"},{"location":"Posts/Old%20Blog%20Posts/2021-01-21-github-compare/","text":"There is a clean way to compare two branches in GitHub, but the UI does not show this anywhere. On the URL you need to use the compare route, followed by the first branch name followed by three dots followed by the second branch name. So for example: If I have a reposoitory called 'https://github.com/petermarshall/xcafe-web' and a branch called 'tidy-source-and-images' and a branch called 'workpc' I can create the url: 'https://github.com/petermarshall/xcafe-web/compare/tidy-source-and-images...workpc' It is the first time I have seen anyone use three dots (...) to have any meaning in a url and I am unsure of the origin of this convention. As a side issue I have just finished reading 'The Midnight Library' by Matt Haig. Which was uplifting and life asserting, but a bit predictable. The book was I suppose (maybe) aimed at depressed people, perhaps. I didnt learn anything from the book. Maybe I am too positive already.","title":"Compare two branches in GitHub"},{"location":"Posts/Old%20Blog%20Posts/2021-03-01-replace-text-windows/","text":"When deploying a file to a server I need to replace some text with a differnt text. The code is deployed using github actions. There are pre-defined actiosn but they are all made to run under linux. My build process is runing in a windows virtual nachine. So how do I do it on a windows virtual machine? Powershell is available, and we can use a powershell command. We can read the file content, replace the text and pipe it back to the same file as output. ''' $ powershell -Command \"(get-content text.txt) -replace 'test', 'xxx' | Out-File -encoding ASCII text.txt\" ''' No need to use a github action.","title":"How to replace text in windows"},{"location":"Posts/Old%20Blog%20Posts/2021-04-02-use-bing-maps-in-blazor-webassembly/","text":"Get a bing maps api key from here Create you blazor client side app. Locate the index.html file under wwwroot/pages Add the following lines in the body section <script src=\"script.js\"></script> <script src='https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=your-api-key-from-above' type='text/javascript'></script> Add a js file at the root level in wwwroot called script.js Add the following lines in the script file. function loadBingMap() { var map = new Microsoft.Maps.Map(document.getElementById('map'), {}); var pushpin = new Microsoft.Maps.Pushpin(map.getCenter(), null); map.entities.push(pushpin); return \"\"; } Locate the page where you want the map to appear such as index.razor for example in the views folder. Leave the @page directive as it is. Add the following lines @inject IJSRuntime JSRuntime <h1>Display Bing Map</h1> <div id=\"map\" style=\"height:500px;width:100%;\"> </div> @code { protected override async Task OnAfterRenderAsync(bool firstRender) { if (firstRender) { await JSRuntime.InvokeVoidAsync(\"loadBingMap\", null); } } } Build and run. \ud83d\ude00","title":"How to add bing maps to a blazor webassembly app"},{"location":"Posts/Old%20Blog%20Posts/2021-04-23-Debug-js-in-vs/","text":"Install the nuget package https://www.nuget.org/packages/Microsoft.VisualStudio.Web.BrowserLink/ Add ... csharp if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); app.UseBrowserLink(); } ''' To the Startup.cs Configure method. And it still doesnt work. Forgett all the above. Add 'debugger' to the script.","title":"How to debug javascript in Visual Studio"},{"location":"Posts/Old%20Blog%20Posts/2021-08-04-Refresh-view-component/","text":"ViewComponents are nice tidy encapsulated bits of code and HTML in dotnet core mvc framework. To insert the result of a view component into the page you do. ''' html @await Component.InvokeAsync(\"Notification\") ''' and you have a view component called NotificationViewComponent that supplys the html to go in there, as the content of the div with the id 'notifications'. That will run on page load. However, what if you want the view component contents to refresh at some point, when you get a new notification to display for example. You cannot call the viewcomponent from a post or get directly. You have to add an intermediary method in a normal controller. ''' csharp public IActionResult ReloadNotifications() { return ViewComponent(\"Notification\"); } ''' Write a javascript function as follows, that calls the normal controller, that then returns the contents of the view component. ''' javascript function reloadNotifications() { $.post('/App/ReloadNotifications', function (data) { $(\"#notifications\").html(data); }); } ''' and then call that function when you want to reload the contents of that div.","title":"How to Refresh a ViewComponent from javascript"},{"location":"Posts/Old%20Blog%20Posts/2021-10-01-DotnetCoreWebJob/","text":"Webjobs run in the context of a running app service, the easiest way to get goin is to add a console application to an existing solution that deploys to an app service. In that solution add new console application project. Change the defualt program as follows '''csharp static async Task Main() { var builder = new HostBuilder(); builder.ConfigureWebJobs(b => { b.AddAzureStorageCoreServices(); b.AddAzureStorage(); b.AddTimers(); }); builder.ConfigureLogging((context, b) => { b.AddConsole(); }); builder.ConfigureHostConfiguration(Configure); builder.ConfigureAppConfiguration(Configure); builder.UseEnvironment(EnvironmentName.Development); var host = builder.Build(); using (host) { await host.RunAsync(); } } private static void Configure(IConfigurationBuilder builder) { builder.SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(\"appsettings.json\",false,true); } ''' The AddTimers() is needed if you want the functions to run as a cron job. The AzureWebJobsDashboard and AzureWebJobsStorage values storred in the appsettings file are documented elsewhere on the internet. Create a class called Functions.cs '''csharp using System; using System.Collections.Generic; using System.Linq; using System.Net.Http; using System.Text; using System.Threading.Tasks; using Microsoft.Azure.WebJobs; using Microsoft.Extensions.Configuration; using Microsoft.Extensions.Logging; namespace xxxRefresh { public class Functions { private IConfiguration _configuration; public Functions(IConfiguration configuration) { _configuration = configuration; } /// <summary> /// Runs whenever a message is dropped in the somequeue /// To perform a FULL PEP refresh use \"FULL\" as the message. /// </summary> /// <returns></returns> public async Task ProcessQueueMessageAsync([QueueTrigger(\"somequeue\")] string message, ILogger logger) { await PerformAction(message, logger); } /// <summary> /// \"1 0 * * *\" One minute past midnight every day /// USE \"* * * * *\" to run every minute - all the time /// </summary> /// <returns></returns> public async Task ProcessFullPepRefreshOnScheduleAsync([TimerTrigger(\"1 0 * * *\")] TimerInfo timer, ILogger logger) { await PerformAction(\"FULL\", logger); } private // write your own perform action method ..... } } } ''' The functions will be detected when the console app in run.","title":"How to Create, deploy and trigger a dotnet core webjob"},{"location":"Posts/Old%20Blog%20Posts/2022-01-16-links/","text":"Two ways toCreate and pull down SQL Server Databases for unit testing. Local Db Respawn Load Testing as part of the unit test package. NBomber","title":"A link gathering"},{"location":"links/links/","text":"Links This is the old links page. Past Learning JavaScript Everywhere This is the book I am worked through in 2020. It resulted in the re-write of nearby.cafe in react.js and graphql. I was very happy with the result. But I have since re-written the site in blazor. Markdown Markdown Cheatsheet I use markdown more and more. Now that this site is written using mkdocs I will be using it even more. REST Microsoft REST API Guidelines C MoreDotNet A combination of helpful extension methods. C# exception handling best practices SENDING AND RECEIVING JSON USING HTTPCLIENT WITH SYSTEM.NET.HTTP.JSON Dependency Injection Lifetimes In ASP.NET CORE This is a good clear explanation. c# Code Coverage Measuring .NET Core Test Coverage with Coverlet Electron Building a desktop application with Electron Useful resources for creating apps with Electron Electron React Boilerplate Essential Electron - Concise plain-speak about Electron Simple data persistence for your Electron app or module - Save and load user preferences, app state, cache, etc Rocket-Store Using the filesystem as a searchable database. Rocket-Store is a high performance solution to simple data storage and retrieval. It's taking advantage of modern file system's exceptionally advanced cashing mechanisms. It's packaged in a single file to include, with few dependencies. Lists Code Beautify Tools Online Notepad for developers Message queues Announcing Message DB: Event Store and Message Store for PostgreSQL React react redux article React with Electron electron react boilerplate github electron react boilerplate website *A Foundation for Scalable Cross-Platform Apps # javascript libraries * Create complete reports using DataTables and ASP.NET MVC Core","title":"Links"},{"location":"links/links/#links","text":"","title":"Links"},{"location":"links/links/#this-is-the-old-links-page","text":"","title":"This is the old links page."},{"location":"links/links/#past-learning","text":"JavaScript Everywhere This is the book I am worked through in 2020. It resulted in the re-write of nearby.cafe in react.js and graphql. I was very happy with the result. But I have since re-written the site in blazor.","title":"Past Learning"},{"location":"links/links/#markdown","text":"Markdown Cheatsheet I use markdown more and more. Now that this site is written using mkdocs I will be using it even more.","title":"Markdown"},{"location":"links/links/#rest","text":"Microsoft REST API Guidelines","title":"REST"},{"location":"links/links/#c","text":"MoreDotNet A combination of helpful extension methods. C# exception handling best practices SENDING AND RECEIVING JSON USING HTTPCLIENT WITH SYSTEM.NET.HTTP.JSON Dependency Injection Lifetimes In ASP.NET CORE This is a good clear explanation.","title":"C"},{"location":"links/links/#c-code-coverage","text":"Measuring .NET Core Test Coverage with Coverlet","title":"c# Code Coverage"},{"location":"links/links/#electron","text":"Building a desktop application with Electron Useful resources for creating apps with Electron Electron React Boilerplate Essential Electron - Concise plain-speak about Electron Simple data persistence for your Electron app or module - Save and load user preferences, app state, cache, etc Rocket-Store Using the filesystem as a searchable database. Rocket-Store is a high performance solution to simple data storage and retrieval. It's taking advantage of modern file system's exceptionally advanced cashing mechanisms. It's packaged in a single file to include, with few dependencies.","title":"Electron"},{"location":"links/links/#lists","text":"Code Beautify","title":"Lists"},{"location":"links/links/#tools","text":"Online Notepad for developers","title":"Tools"},{"location":"links/links/#message-queues","text":"Announcing Message DB: Event Store and Message Store for PostgreSQL","title":"Message queues"},{"location":"links/links/#react","text":"react redux article","title":"React"},{"location":"links/links/#react-with-electron","text":"electron react boilerplate github electron react boilerplate website *A Foundation for Scalable Cross-Platform Apps # javascript libraries * Create complete reports using DataTables and ASP.NET MVC Core","title":"React with Electron"},{"location":"pages/about/","text":"Personal Blog I used to write items to this blog, but like almost all blogs it is redundant now. Twitter LinkedIn Stackoverflow MS Certification Nearby.Cafe Nearby.cafe is a site I use to learn technologies. It gets the users location, and shows them the nearest cafes. hosted on azure uses cosmosDb to store the location of every cafe in the world cafe locations were sourced from openstreetmap uses react as the frontend framework uses asp.net and c# on the server side.","title":"About"},{"location":"pages/about/#nearbycafe","text":"Nearby.cafe is a site I use to learn technologies. It gets the users location, and shows them the nearest cafes. hosted on azure uses cosmosDb to store the location of every cafe in the world cafe locations were sourced from openstreetmap uses react as the frontend framework uses asp.net and c# on the server side.","title":"Nearby.Cafe"},{"location":"pages/cv/","text":"CV Peter Marshall 53 Great Clarendon st, Oxford, OX2 6AX, UK . marshall.peter@gmail.com Enterprise Application Developer with over 30 Years of experience as a contractor working on a wide variety of development projects. Working mostly in Public Utilities, Telecoms, Finance and Scientific Journal Publishing. Most recent Skills: ASP.NET MVC, C#, SQL Server, Postgresql, Web Services, Visual Studio, Agile, Scrum, REST, LINQ, TDD, BDD, EF. Javascript, Angular, React, GraphQL, Azure Recent Experience Devops Manager / Scrum master / Senior Developer SIMUR.ES (Malaga, Spain) February 2021 - present Skills: DOTNET CORE, ASP.NET MVC, WEB API, C#, JavaScript, Azure, Azure Devops, Micro services, MySql, Git, TDD, scrum, YAML, razor. Developing an Anti Money Laundering Application, contributting to the all aspects of the project. Front end code in ASP.NET MVC, back end services in WEB API DOTNET CORE in C#. This is a small startup, and as the senior developer I am responsible for CD and CI pipelines in Azure Devops. Setting up and maintaining the boards and backlogs in Azure Devops. Because of the size and nature of this startup this role required me to be ultra flexible in working practices. Working both remotly and on site in Malaga, as well as working with developers and staff with varying degrees of english and software development experience. Senior Developer (contract) UKSBS (Swindon) November 2018 - January 2021 Skills: DOTNET CORE, ASP.NET MVC, WEB API, C#, JavaScript, AWS, Micro services, Postgresql, Git, TDD, scrum, Okta, Jenkins, GraphQL, dapper, razor, BDDfy, rabbitMQ. Replacing the clients grant profiling and indexation services to enable them to de-couple from legacy 3rd party systems. Creating user interfaces for applications using razor and web services in asp.net webapi. Building these solutions from the ground up. Involved in all aspects of the development including selecting the development stack and technology. Coding complex financial spread calculations in C#. Deciphering existing stored procedures and building understanding where no documentation existed. As senior developer building up a development team and putting in place the software development process and toolset. Assisting the scrummaster to set up the scrum process and leading scrum retrospectives from time to time. Creating a successful migration process to transfer millions of existing grants from the legacy system to the new system, using S3 buckets for data storage, without loss of data. Writing code across the full stack, some of these modules were very complex indeed translating existing stored procedures for spread calculations into c#. Creating API's so external systems can interact with the microservices, including creating a GraphQL endpoint for client defined queries. Senior Developer (contract) Schroders Asset Management (Luxembourg) July 2018 - October 2018 Skills: ASP.NET MVC, WEB API, C#, JavaScript, Azure, Service Fabric, React, Sql Server, GraphQl, NodeJS, TFS, TDD, scrum, Octopus Deploy Developing api end points in c# to serve up clients data though services deployed on azure service fabric. Operating out of Luxembourg, Working in a globally distributed team, managing build and deploy process in Octopus Deploy. The project was to supply a single source of truth for Schroders reporting data, as part of their digital strategy. Developer (contract) Sunquest Information Systems July 2017 - July 2018 Skills: ASP.NET MVC, WEB API, C#, JavaScript, Angular, Sql Server, TFS, TDD, scrum, Entity Framework. Working right across this clients stack, from client side JavaScript (Angular), Server side code in C# and stored procedures in T-SQL on the Sql Server Database. Implementing user stories to add features to this clients application. The application manages patient test results and is used in over 70% of UK hospitals. Developed an application using electron and react, to query and update their database as a tool for assisting migration of data from one version of the application to another. Acting as scrum master and scrum mentor when required, specifically in leading the retrospectives. Developer (contract) JP Morgan March 2017 - July 2017 Skills: ASP.NET MVC, WEB API, C#, Javascript, typescript, Angular, Sql Server, Git, TDD, splunk, windows services, powershell, Jenkins. Developing Application Compute Cloud. An internal application to manage virtual machines running on the custom JP Morgan Cloud infrastructure. Updating the existing solution to comply with internal standards for software development. Implementing unit testing and dependency injection (unity). Developing new functionality across the stack from Angular, through the web api and database layers. Creating a log manager and adding logging to a webapi, and a management service. Log manager writes log info directly to splunk for analysis. Maintaining the continuous integration and deployment through Jenkins, writing scripts in powershell. Developer (contract) UCAS March 2015 - February 2017 Skills: ASP.NET MVC, WEB API, C#, Javascript, Angular, MySql, Git, NEventStore, Dapper, ElasticSearch, CQRS, AWS, Postgres, Fluent Migrator, MSPec, Scrum, TDD. Working as part of the Digital Acceleration team to completely re-write the online presence of this well respected public institution. This was a very big project with multiple scrum teams and a huge technology stack. Atlassian products were used to manage the development such as Bamboo, Jira, Bitbucket, Confluence and Hipchat. Initially working on the identity solution to provide single sign on for UCAS services. Interfacing with Gigya as a 3rd party for storage of data. Writing registration pages for password, email etc. Writing the server side REST api code in C#. Black box tests and unit tests. I worked on the provider management pages where universities update course and university data. Written in Angular with client side unit tests in jasmine and Karma. I set up the unit test framework including client side code coverage. In this contract I had to constantly learn new technologies and pushed my frontiers of knowledge into new areas such as document databases and AWS. Developer (contract) Royal Horticultural Society August 2014 - February 2015 Skills: ASP.NET MVC 5.0, WEB.API 2.0, C#, Javascript, SQL Server, TDD, MOQ, TFS, Angular, Bootstrap. This was a full stack role working in a small team using a scrum process to develop a Customer Relationship Management System, from the ground up. I was creating views and directives for this SPA. Working in HTML and javascript on the client side, creating controller code in the WEB.API layer in C# and writing WCF services. Also, db design and code of repository and data access layer, using linq and entity framework. Developer (contract) CPA Global January 2014 - July 2014 Skills: ASP.NET MVC 4, WEB.API, C#, Javascript, SQL Server, Oracle, Telerik Open Access, TDD, BDD, StoryQ, SVN, MOQ, Angular.js, Automapper, JIRA. Leading a small team to evolve this clients software architecture, writing a proof of concept that allowed the repository to be database agnostic, and opening up the front end to be accessible by a variety of clients by using JSON to interact with a WEB.API layer. Worked on features for the next version of the clients IP rights management software, writing c# on the server side. Developer (contract) JP Morgan Chase August 2011 - December 2013 Skills: ASP.NET MVC 3/4, C#, Razor, Javascript, SQL Server, Oracle, Entity Framework, WCF, .NET 4.5, TDD, MOQ, JQuery, Knockout.js, QPID, SPA, scrum, jira, cruisecontrol, svn. Working as part of the Global Technology Infrastructure dept. of this large investment bank. Creating solutions from functional requirements through to production implementation. This role involved working with a distributed development team, with testers in India, and analysts in the USA and management teams in Ireland. Responsible for design docs, code, unit tests, build process, and code management. Developed search pages for the internal Change management System. Developing web pages using Razor and JQuery, and server side code to take data from multiple WCF web services as well as Oracle and SQl Server data sources using Entity Framework. Worked on performance improvements for the whole code base. Refactoring code to take advantage of Entity Framework. Implemented a caching framework to reduce calls on the data sources. This role pushed my knowledge and ability, but in some instances web requests were reduced from 8 minutes to several seconds, and this was a very satisfying result. Developed a SPA for maintaining subscriptions to assets as part of a bigger change management solution. This application featured a complex attribute selection page and a search results page and was my first exposure to using knockout.js and the mvvm pattern in a client side environment. Developed server side components using WebAPI in ASP.NET MVC 4, using JSON to communicate with client side SPA. Older Experience Developer (contract) Doctors Chambers Febuary 2011 - July 2011 Skills: Silverlight, MVVMLight, WCF, ASP.NET, C#, SQL Server, .NET 4, TDD, SVN, Blend, Entity Framework, LINQ, WPF, Interlinq (RIA Services), MOQ, SQl Server Service Broker. As a senior developer I was providing guidance on architecture and development practices. Including giving a lead in tools and environments for TDD. Replacing the clients asp.net order entry system with a Silverlight application to gain performance improvements. I moved the team to using the MVVM pattern for Silverlight development. This has allowed the client to double the throughput of orders and re-allocate staff. I wrote a WPF application to extract emails and attachments from Outlook and transfer these to a SQL server database. In this process email and attachments were converted to XPS file format. Extracting business processes into WCF services. Developer (contract) Reed Business Information August 2010 - Janunary 2011 Skills: WCF, ASP.NET, C#, SQL Server, .NET 3.5, TDD, MOQ, SSIS, Ecommerce, TFS, ELMAH, watin. Leading a small team to refactor and update the code for the clients credit card processing services. Providing guidance on development practices and scrum. Implemented DI on the WCF services, and broke out the code into layers so that it could be tested. This development was a refactoring of the RBI Ecommerce services for all credit card processing from RBI web sites. All credit card transactions for Reed are now channelled through this single WCF web service, where they are distributed across several card service providers. This is a highly secure and high volume solution. Implemented ELMAH as a unified logging system, across ASP.NET sites and WCF services. Developer (contract) Big Pink New Media January 2010 - July 2010 Skills: ASP.NET MVC 2, C#, SQL Server, NHibernate, .NET 3.5, JQuery, Ninject, JSONP, TDD, MOQ, scrum, StoryQ, Sharepoint, Pair Programming. Developed RESTful web services in ASP.NET MVC. Developed components for building web sites for this new media agency. Developed Single Sign On components using Jquery and JSONP to allow sharing of information across domains using cookies. Wrote a utility to extract data from the sharepoint list webservice and transfer this to a sql server database. BDD using StoryQ was used as a demonstration environment for the Web Services. This was a scrum driven project to develop analytics services for pharmaceutical websites developed by a well respected new media agency. Working in a small team my role included code review, design, and refactoring. Developer (contract) Formula One Management September 2009 - January 2010 Skills: ASP.NET MVC, JQuery, C#, SQL Server, Linq to Sql, .NET 3.5, TDD, MOQ, scrum, Excel, DOCX. Design and develop an internal travel system web site. Working in a small development team acting as mentor on MVC pattern and TDD. Covering the full development life cycle and all aspects of the development from table design through to front end layout in CSS and JQuery. Wrote a reporting component that took data from Sql Server and created Excel Spreadsheets. Frequent interacting with system users to define requirements, and demonstrate ongoing development. A significant output from this project was a web design template illustrating best practices that the client could go on to use for future projects. Developer (contract) IDOX Group Plc December 2008 - August 2009 Skills: C#, Oracle, Visual Studio, ASP.NET, NUnit, NHibernate (ORM), Web Services, WSDL, TDD, PLSQL, Perforce. Working for the Northern Ireland Planning Service on a very large development project subcontracted through HP and BT. Technical design and implementation of web services, written in C# with Oracle as a back end. Interacting with end users and consultancies to architect appropriate solutions. Developer (contract) CDC Respond August 2008 - November 2008 Skills: C# 3.0 .NET 3.5, SQL Server, Team Foundation Server, WPF, WCF, LINQ. TDD. Working from detailed specifications as part of a large development team. Writing web services code (WCF), and client side user interface code (WPF), to bring clients application up to date. Cleared defect backlog to hit zero bug bounce prior to releasing code to manufacture. Developer (contract) Pearson (Oxford) November 2007 - July 2008 Skills: ASP.NET MVC, C#, Silverlight, XAML, SQL Server, VisualStudio.NET, TeamCity, REST, NUnit, TDD, watin, Selenium, Subversion, pair programming. Working in an agile team using XP, Scrum and continuous integration to develop a web site for Pearson to distribute disaggregated content. The web site was developed using the MVC pattern in C# with a RESTful architecture. Wrote front end in Silverlight that used the exposed API. Included the complete project life cycle. Analysis, modelling, and development. Responsible for sprint metrics such as code coverage, unit test completion and bug tracking. Developer (contract) OPP (Oxford) August 2006 - October 2007 Skills: ASP.NET 2.0 , C# 2.0, SQL Server 2005, VisualStudio.NET 2005, Windows Forms. Working from business requirements to design and develop an application to manage XML based documents. Created database design and overall architecture. Wrote server side code to process large xml documents and split these up into fragments to be stored in the database. Created a web service to retrieve and manage the xml fragments. Wrote a Windows Forms front end so business users can work with the xml fragments. Deployed using clickonce across the client\u2019s intranet. Working in a very small team within an innovative web based company. The contract was renewed several times. Developer (contract) RWE nPower February 2006 - August 2006 Skills: ASP.NET 2.0 , C# 2.0, SQL Server, Oracle, VisualStudio.NET 2005, Nant, NUnit, FxCop, NCover, TDD. Working in Trading Decision Support, writing web services to deliver charting data from a variety of data sources. Scope included modelling and design of solutions. Writing code in C# to pull data from Sql Server, Oracle, Text Files and other Web Services. Writing complex aggregation routines to reshape data to dealer\u2019s requirements. Providing a lead on agile development practices and creating project environments with .NET. Providing standards documents and documentation of recommended practices. Ancient Experience Developer (contract) Research Machines (Abingdon) Dec 2005 \u2013 Jan 2006 ASP.NET, C#, VB.NET, SQL Server, SharePoint, Active Directory, SharePoint development, writing web parts and ASP.NET pages. Developer (contract) Blackwell Publishing (Oxford) February 2005 \u2013 November 2005 ASP.NET, C#, VB.NET, SQL Server, Web Services, VisualStudio.NET, .Net Framework, CSS, XML, XSLT, NUnit, Nant, FxCop, UML, BizTalk, Agile Software Development, Ajax, Developer, Web Front end to tracking system, Web services, stored procedures, TDD, OO modelling, Application Developer. Developer (contract) Elsevier Science (Oxford) June 2004 \u2013 January 2005 ASP.NET, C#, SQL Server, Web Services, Windows2003/XP, VisualStudio.NET, .Net Framework, SharePoint Portal Server, Web Parts, Technical Lead, Mentor, Load Testing, Web services. Developer (contract) Elsevier Science (Oxford) December 2001 \u2013 June 2004 ASP.NET, C#, XML, XSL, SQL Server, SOAP, Web Services, IIS, HTML, VisualStudio.NET, JavaScript, .Net Framework, Technical Lead. Developer (contract) Elsevier Science (Oxford) April 2001 \u2013 December 2001 ASP, Visual Basic 6, XML, XSL, SQL Server, SOAP, Web Services, NT, IIS HTML. Developer (contract) Achilles Information November 2000 \u2013 March 2001 ASP, Visual Basic 6, XML, XSL, SQL Server, SOAP, Web services, NT, IIS, HTML, RDF. Developer (contract) DELL AUGUST 2000 \u2013 NOVEMBER 2000 ASP, Visual Basic 6, XML, XSL, MTS, Oracle 8, NT, IIS, HTML, JavaScript, VBScript, PLSQL, Loadrunner. Developer (contract) Informed People (Oxford) February 2000 \u2013 August 2000 ASP, Visual Basic 6, XML, XSL, WML, SOAP, WAP, SQL Server 7, Oracle 8i, NT, HTML, VML, JavaScript, VBScript, PLSQL. Developer (contract) B.M.W. (GB) July 1999 \u2013 February 2000 VB6, ASP, PL/SQL, MTS, ADO, XML, Windows NT, Oracle8, Access, COM, HTML. Developer (contract) Nortel Networks March 1999 \u2013 June 1999 VB6, VC++, HTML, ASP, Oracel8, PL/SQL, RDO, ADO, ActiveX, COM, Visual Modeller, FrontPage, Crystal Reports. Developer (contract) Capital One (Nottingham) September 1998 \u2013 February 1999 VB6, Visual C++, PL/SQL, Oracle 8, ADO, ActiveX, COM/DCOM, OOP, Windows 95, Windows NT. Developer (contract) A.M.S. (Dusseldorf) July 1998 \u2013 August 1998 VB5, Access, SourceSafe, HTML, MS Agent, Win 95. Developer (contract) PowerGen (Coventry) April 1997 \u2013 June 1998 VB5, PLSQL, RDO, SourceSafe, Crystal reports. Developer (contract) WS Atkins (Newport) January 1997 \u2013 March 1997 VB4, Oracle, SQL, ODBC API, RDO. Developer (contract) Windsor Life (Telford) October 1996 \u2013 December 1996 VB4, Oracle, SQL, Access, PVCS, Word. Developer (contract) C.S.C (Cambridge) February 1996 \u2013 September 1996 VB4, Access, OLE Automation, DDE, MS Project, OOP, SQL. Developer (contract) British Gypsum January 1996 \u2013 February 1996 VAX COBOL, POWERHOUSE. Developer (contract) Arjo Wiggins May 1995 \u2013 December 1995 VAX COBOL, DECFORMS, FMS, SQL, Access. Developer (contract) Anglia Water January 1995 \u2013 April 1995 Visual Basic, VAX COBOL, SQLModule. Developer (contract) AT & T ISTEL July 1994 \u2013 December 1994 DEC/VAX COBOL, POWERHOUSE. Developer (contract) National Power March 1993 \u2013 June 1994 VAX COBOL, VAX C, SLGMS. Developer (contract) KPMG January 1993 \u2013 February 1993 VAX COBOL. Developer (contract) MODO Group July 1992 \u2013 December 1992 VAX COBOL, POWERHOUSE. Developer (contract) AT & T ISTEL February 1991- June 1992 COBOL, POWERHOUSE. Developer (permanent) SOVICO (France) August 1990 \u2013 January 1991 VAX COBOL, DCL. Developer (contract) D.E.C. (France) December 1989 \u2013 July 1990 VAX PASCAL,VAX BASIC, DCL, SQL. Developer (permanent) Thomas Cook May 1987 \u2013 December 1989 VAX BASIC, PRO IV, COBOL, DCL. Developer (permanent) Workstations Ltd. February 1985 \u2013 May 1987 DATAFLEX. Developer (permanent) INTEC Ltd. June 1984 \u2013 February 1985 BBC BASIC, 6502 Assembler. Education Norwich City College BEC TEC HND Computer Studies september 1981 - June 1983 King Edward VII Upper School A Levels, O Levels Skills Programming Languages & Tools dotnet React Visual Studio Windows Angular JS Javascript SQL Server Atlassian Git html5 Personal Blog Twitter LinkedIn Stackoverflow MS Certification Awards & Certifications","title":"CV"},{"location":"pages/cv/#cv","text":"","title":"CV"},{"location":"pages/cv/#peter-marshall","text":"53 Great Clarendon st, Oxford, OX2 6AX, UK . marshall.peter@gmail.com Enterprise Application Developer with over 30 Years of experience as a contractor working on a wide variety of development projects. Working mostly in Public Utilities, Telecoms, Finance and Scientific Journal Publishing. Most recent Skills: ASP.NET MVC, C#, SQL Server, Postgresql, Web Services, Visual Studio, Agile, Scrum, REST, LINQ, TDD, BDD, EF. Javascript, Angular, React, GraphQL, Azure","title":"Peter Marshall"},{"location":"pages/cv/#recent-experience","text":"","title":"Recent Experience"},{"location":"pages/cv/#devops-manager-scrum-master-senior-developer","text":"","title":"Devops Manager / Scrum master / Senior Developer"},{"location":"pages/cv/#simures-malaga-spain","text":"February 2021 - present Skills: DOTNET CORE, ASP.NET MVC, WEB API, C#, JavaScript, Azure, Azure Devops, Micro services, MySql, Git, TDD, scrum, YAML, razor. Developing an Anti Money Laundering Application, contributting to the all aspects of the project. Front end code in ASP.NET MVC, back end services in WEB API DOTNET CORE in C#. This is a small startup, and as the senior developer I am responsible for CD and CI pipelines in Azure Devops. Setting up and maintaining the boards and backlogs in Azure Devops. Because of the size and nature of this startup this role required me to be ultra flexible in working practices. Working both remotly and on site in Malaga, as well as working with developers and staff with varying degrees of english and software development experience.","title":"SIMUR.ES (Malaga, Spain)"},{"location":"pages/cv/#senior-developer-contract","text":"","title":"Senior Developer (contract)"},{"location":"pages/cv/#uksbs-swindon","text":"November 2018 - January 2021 Skills: DOTNET CORE, ASP.NET MVC, WEB API, C#, JavaScript, AWS, Micro services, Postgresql, Git, TDD, scrum, Okta, Jenkins, GraphQL, dapper, razor, BDDfy, rabbitMQ. Replacing the clients grant profiling and indexation services to enable them to de-couple from legacy 3rd party systems. Creating user interfaces for applications using razor and web services in asp.net webapi. Building these solutions from the ground up. Involved in all aspects of the development including selecting the development stack and technology. Coding complex financial spread calculations in C#. Deciphering existing stored procedures and building understanding where no documentation existed. As senior developer building up a development team and putting in place the software development process and toolset. Assisting the scrummaster to set up the scrum process and leading scrum retrospectives from time to time. Creating a successful migration process to transfer millions of existing grants from the legacy system to the new system, using S3 buckets for data storage, without loss of data. Writing code across the full stack, some of these modules were very complex indeed translating existing stored procedures for spread calculations into c#. Creating API's so external systems can interact with the microservices, including creating a GraphQL endpoint for client defined queries.","title":"UKSBS (Swindon)"},{"location":"pages/cv/#senior-developer-contract_1","text":"","title":"Senior Developer (contract)"},{"location":"pages/cv/#schroders-asset-management-luxembourg","text":"July 2018 - October 2018 Skills: ASP.NET MVC, WEB API, C#, JavaScript, Azure, Service Fabric, React, Sql Server, GraphQl, NodeJS, TFS, TDD, scrum, Octopus Deploy Developing api end points in c# to serve up clients data though services deployed on azure service fabric. Operating out of Luxembourg, Working in a globally distributed team, managing build and deploy process in Octopus Deploy. The project was to supply a single source of truth for Schroders reporting data, as part of their digital strategy.","title":"Schroders Asset Management (Luxembourg)"},{"location":"pages/cv/#developer-contract","text":"","title":"Developer (contract)"},{"location":"pages/cv/#sunquest-information-systems","text":"July 2017 - July 2018 Skills: ASP.NET MVC, WEB API, C#, JavaScript, Angular, Sql Server, TFS, TDD, scrum, Entity Framework. Working right across this clients stack, from client side JavaScript (Angular), Server side code in C# and stored procedures in T-SQL on the Sql Server Database. Implementing user stories to add features to this clients application. The application manages patient test results and is used in over 70% of UK hospitals. Developed an application using electron and react, to query and update their database as a tool for assisting migration of data from one version of the application to another. Acting as scrum master and scrum mentor when required, specifically in leading the retrospectives.","title":"Sunquest Information Systems"},{"location":"pages/cv/#developer-contract_1","text":"","title":"Developer (contract)"},{"location":"pages/cv/#jp-morgan","text":"March 2017 - July 2017 Skills: ASP.NET MVC, WEB API, C#, Javascript, typescript, Angular, Sql Server, Git, TDD, splunk, windows services, powershell, Jenkins. Developing Application Compute Cloud. An internal application to manage virtual machines running on the custom JP Morgan Cloud infrastructure. Updating the existing solution to comply with internal standards for software development. Implementing unit testing and dependency injection (unity). Developing new functionality across the stack from Angular, through the web api and database layers. Creating a log manager and adding logging to a webapi, and a management service. Log manager writes log info directly to splunk for analysis. Maintaining the continuous integration and deployment through Jenkins, writing scripts in powershell.","title":"JP Morgan"},{"location":"pages/cv/#developer-contract_2","text":"","title":"Developer (contract)"},{"location":"pages/cv/#ucas","text":"March 2015 - February 2017 Skills: ASP.NET MVC, WEB API, C#, Javascript, Angular, MySql, Git, NEventStore, Dapper, ElasticSearch, CQRS, AWS, Postgres, Fluent Migrator, MSPec, Scrum, TDD. Working as part of the Digital Acceleration team to completely re-write the online presence of this well respected public institution. This was a very big project with multiple scrum teams and a huge technology stack. Atlassian products were used to manage the development such as Bamboo, Jira, Bitbucket, Confluence and Hipchat. Initially working on the identity solution to provide single sign on for UCAS services. Interfacing with Gigya as a 3rd party for storage of data. Writing registration pages for password, email etc. Writing the server side REST api code in C#. Black box tests and unit tests. I worked on the provider management pages where universities update course and university data. Written in Angular with client side unit tests in jasmine and Karma. I set up the unit test framework including client side code coverage. In this contract I had to constantly learn new technologies and pushed my frontiers of knowledge into new areas such as document databases and AWS.","title":"UCAS"},{"location":"pages/cv/#developer-contract_3","text":"","title":"Developer (contract)"},{"location":"pages/cv/#royal-horticultural-society","text":"August 2014 - February 2015 Skills: ASP.NET MVC 5.0, WEB.API 2.0, C#, Javascript, SQL Server, TDD, MOQ, TFS, Angular, Bootstrap. This was a full stack role working in a small team using a scrum process to develop a Customer Relationship Management System, from the ground up. I was creating views and directives for this SPA. Working in HTML and javascript on the client side, creating controller code in the WEB.API layer in C# and writing WCF services. Also, db design and code of repository and data access layer, using linq and entity framework.","title":"Royal Horticultural Society"},{"location":"pages/cv/#developer-contract_4","text":"","title":"Developer (contract)"},{"location":"pages/cv/#cpa-global","text":"January 2014 - July 2014 Skills: ASP.NET MVC 4, WEB.API, C#, Javascript, SQL Server, Oracle, Telerik Open Access, TDD, BDD, StoryQ, SVN, MOQ, Angular.js, Automapper, JIRA. Leading a small team to evolve this clients software architecture, writing a proof of concept that allowed the repository to be database agnostic, and opening up the front end to be accessible by a variety of clients by using JSON to interact with a WEB.API layer. Worked on features for the next version of the clients IP rights management software, writing c# on the server side.","title":"CPA Global"},{"location":"pages/cv/#developer-contract_5","text":"","title":"Developer (contract)"},{"location":"pages/cv/#jp-morgan-chase","text":"August 2011 - December 2013 Skills: ASP.NET MVC 3/4, C#, Razor, Javascript, SQL Server, Oracle, Entity Framework, WCF, .NET 4.5, TDD, MOQ, JQuery, Knockout.js, QPID, SPA, scrum, jira, cruisecontrol, svn. Working as part of the Global Technology Infrastructure dept. of this large investment bank. Creating solutions from functional requirements through to production implementation. This role involved working with a distributed development team, with testers in India, and analysts in the USA and management teams in Ireland. Responsible for design docs, code, unit tests, build process, and code management. Developed search pages for the internal Change management System. Developing web pages using Razor and JQuery, and server side code to take data from multiple WCF web services as well as Oracle and SQl Server data sources using Entity Framework. Worked on performance improvements for the whole code base. Refactoring code to take advantage of Entity Framework. Implemented a caching framework to reduce calls on the data sources. This role pushed my knowledge and ability, but in some instances web requests were reduced from 8 minutes to several seconds, and this was a very satisfying result. Developed a SPA for maintaining subscriptions to assets as part of a bigger change management solution. This application featured a complex attribute selection page and a search results page and was my first exposure to using knockout.js and the mvvm pattern in a client side environment. Developed server side components using WebAPI in ASP.NET MVC 4, using JSON to communicate with client side SPA.","title":"JP Morgan Chase"},{"location":"pages/cv/#older-experience","text":"","title":"Older Experience"},{"location":"pages/cv/#developer-contract_6","text":"","title":"Developer (contract)"},{"location":"pages/cv/#doctors-chambers","text":"Febuary 2011 - July 2011 Skills: Silverlight, MVVMLight, WCF, ASP.NET, C#, SQL Server, .NET 4, TDD, SVN, Blend, Entity Framework, LINQ, WPF, Interlinq (RIA Services), MOQ, SQl Server Service Broker. As a senior developer I was providing guidance on architecture and development practices. Including giving a lead in tools and environments for TDD. Replacing the clients asp.net order entry system with a Silverlight application to gain performance improvements. I moved the team to using the MVVM pattern for Silverlight development. This has allowed the client to double the throughput of orders and re-allocate staff. I wrote a WPF application to extract emails and attachments from Outlook and transfer these to a SQL server database. In this process email and attachments were converted to XPS file format. Extracting business processes into WCF services.","title":"Doctors Chambers"},{"location":"pages/cv/#developer-contract_7","text":"","title":"Developer (contract)"},{"location":"pages/cv/#reed-business-information","text":"August 2010 - Janunary 2011 Skills: WCF, ASP.NET, C#, SQL Server, .NET 3.5, TDD, MOQ, SSIS, Ecommerce, TFS, ELMAH, watin. Leading a small team to refactor and update the code for the clients credit card processing services. Providing guidance on development practices and scrum. Implemented DI on the WCF services, and broke out the code into layers so that it could be tested. This development was a refactoring of the RBI Ecommerce services for all credit card processing from RBI web sites. All credit card transactions for Reed are now channelled through this single WCF web service, where they are distributed across several card service providers. This is a highly secure and high volume solution. Implemented ELMAH as a unified logging system, across ASP.NET sites and WCF services.","title":"Reed Business Information"},{"location":"pages/cv/#developer-contract_8","text":"","title":"Developer (contract)"},{"location":"pages/cv/#big-pink-new-media","text":"January 2010 - July 2010 Skills: ASP.NET MVC 2, C#, SQL Server, NHibernate, .NET 3.5, JQuery, Ninject, JSONP, TDD, MOQ, scrum, StoryQ, Sharepoint, Pair Programming. Developed RESTful web services in ASP.NET MVC. Developed components for building web sites for this new media agency. Developed Single Sign On components using Jquery and JSONP to allow sharing of information across domains using cookies. Wrote a utility to extract data from the sharepoint list webservice and transfer this to a sql server database. BDD using StoryQ was used as a demonstration environment for the Web Services. This was a scrum driven project to develop analytics services for pharmaceutical websites developed by a well respected new media agency. Working in a small team my role included code review, design, and refactoring.","title":"Big Pink New Media"},{"location":"pages/cv/#developer-contract_9","text":"","title":"Developer (contract)"},{"location":"pages/cv/#formula-one-management","text":"September 2009 - January 2010 Skills: ASP.NET MVC, JQuery, C#, SQL Server, Linq to Sql, .NET 3.5, TDD, MOQ, scrum, Excel, DOCX. Design and develop an internal travel system web site. Working in a small development team acting as mentor on MVC pattern and TDD. Covering the full development life cycle and all aspects of the development from table design through to front end layout in CSS and JQuery. Wrote a reporting component that took data from Sql Server and created Excel Spreadsheets. Frequent interacting with system users to define requirements, and demonstrate ongoing development. A significant output from this project was a web design template illustrating best practices that the client could go on to use for future projects.","title":"Formula One Management"},{"location":"pages/cv/#developer-contract_10","text":"","title":"Developer (contract)"},{"location":"pages/cv/#idox-group-plc","text":"December 2008 - August 2009 Skills: C#, Oracle, Visual Studio, ASP.NET, NUnit, NHibernate (ORM), Web Services, WSDL, TDD, PLSQL, Perforce. Working for the Northern Ireland Planning Service on a very large development project subcontracted through HP and BT. Technical design and implementation of web services, written in C# with Oracle as a back end. Interacting with end users and consultancies to architect appropriate solutions.","title":"IDOX Group Plc"},{"location":"pages/cv/#developer-contract_11","text":"","title":"Developer (contract)"},{"location":"pages/cv/#cdc-respond","text":"August 2008 - November 2008 Skills: C# 3.0 .NET 3.5, SQL Server, Team Foundation Server, WPF, WCF, LINQ. TDD. Working from detailed specifications as part of a large development team. Writing web services code (WCF), and client side user interface code (WPF), to bring clients application up to date. Cleared defect backlog to hit zero bug bounce prior to releasing code to manufacture.","title":"CDC Respond"},{"location":"pages/cv/#developer-contract_12","text":"","title":"Developer (contract)"},{"location":"pages/cv/#pearson-oxford","text":"November 2007 - July 2008 Skills: ASP.NET MVC, C#, Silverlight, XAML, SQL Server, VisualStudio.NET, TeamCity, REST, NUnit, TDD, watin, Selenium, Subversion, pair programming. Working in an agile team using XP, Scrum and continuous integration to develop a web site for Pearson to distribute disaggregated content. The web site was developed using the MVC pattern in C# with a RESTful architecture. Wrote front end in Silverlight that used the exposed API. Included the complete project life cycle. Analysis, modelling, and development. Responsible for sprint metrics such as code coverage, unit test completion and bug tracking.","title":"Pearson (Oxford)"},{"location":"pages/cv/#developer-contract_13","text":"","title":"Developer (contract)"},{"location":"pages/cv/#opp-oxford","text":"August 2006 - October 2007 Skills: ASP.NET 2.0 , C# 2.0, SQL Server 2005, VisualStudio.NET 2005, Windows Forms. Working from business requirements to design and develop an application to manage XML based documents. Created database design and overall architecture. Wrote server side code to process large xml documents and split these up into fragments to be stored in the database. Created a web service to retrieve and manage the xml fragments. Wrote a Windows Forms front end so business users can work with the xml fragments. Deployed using clickonce across the client\u2019s intranet. Working in a very small team within an innovative web based company. The contract was renewed several times.","title":"OPP (Oxford)"},{"location":"pages/cv/#developer-contract_14","text":"","title":"Developer (contract)"},{"location":"pages/cv/#rwe-npower","text":"February 2006 - August 2006 Skills: ASP.NET 2.0 , C# 2.0, SQL Server, Oracle, VisualStudio.NET 2005, Nant, NUnit, FxCop, NCover, TDD. Working in Trading Decision Support, writing web services to deliver charting data from a variety of data sources. Scope included modelling and design of solutions. Writing code in C# to pull data from Sql Server, Oracle, Text Files and other Web Services. Writing complex aggregation routines to reshape data to dealer\u2019s requirements. Providing a lead on agile development practices and creating project environments with .NET. Providing standards documents and documentation of recommended practices.","title":"RWE nPower"},{"location":"pages/cv/#ancient-experience","text":"","title":"Ancient Experience"},{"location":"pages/cv/#developer-contract_15","text":"","title":"Developer (contract)"},{"location":"pages/cv/#research-machines-abingdon","text":"Dec 2005 \u2013 Jan 2006 ASP.NET, C#, VB.NET, SQL Server, SharePoint, Active Directory, SharePoint development, writing web parts and ASP.NET pages.","title":"Research Machines (Abingdon)"},{"location":"pages/cv/#developer-contract_16","text":"","title":"Developer (contract)"},{"location":"pages/cv/#blackwell-publishing-oxford","text":"February 2005 \u2013 November 2005 ASP.NET, C#, VB.NET, SQL Server, Web Services, VisualStudio.NET, .Net Framework, CSS, XML, XSLT, NUnit, Nant, FxCop, UML, BizTalk, Agile Software Development, Ajax, Developer, Web Front end to tracking system, Web services, stored procedures, TDD, OO modelling, Application Developer.","title":"Blackwell Publishing (Oxford)"},{"location":"pages/cv/#developer-contract_17","text":"","title":"Developer (contract)"},{"location":"pages/cv/#elsevier-science-oxford","text":"June 2004 \u2013 January 2005 ASP.NET, C#, SQL Server, Web Services, Windows2003/XP, VisualStudio.NET, .Net Framework, SharePoint Portal Server, Web Parts, Technical Lead, Mentor, Load Testing, Web services.","title":"Elsevier Science (Oxford)"},{"location":"pages/cv/#developer-contract_18","text":"","title":"Developer (contract)"},{"location":"pages/cv/#elsevier-science-oxford_1","text":"December 2001 \u2013 June 2004 ASP.NET, C#, XML, XSL, SQL Server, SOAP, Web Services, IIS, HTML, VisualStudio.NET, JavaScript, .Net Framework, Technical Lead.","title":"Elsevier Science (Oxford)"},{"location":"pages/cv/#developer-contract_19","text":"","title":"Developer (contract)"},{"location":"pages/cv/#elsevier-science-oxford_2","text":"April 2001 \u2013 December 2001 ASP, Visual Basic 6, XML, XSL, SQL Server, SOAP, Web Services, NT, IIS HTML.","title":"Elsevier Science (Oxford)"},{"location":"pages/cv/#developer-contract_20","text":"","title":"Developer (contract)"},{"location":"pages/cv/#achilles-information","text":"November 2000 \u2013 March 2001 ASP, Visual Basic 6, XML, XSL, SQL Server, SOAP, Web services, NT, IIS, HTML, RDF.","title":"Achilles Information"},{"location":"pages/cv/#developer-contract_21","text":"","title":"Developer (contract)"},{"location":"pages/cv/#dell","text":"AUGUST 2000 \u2013 NOVEMBER 2000 ASP, Visual Basic 6, XML, XSL, MTS, Oracle 8, NT, IIS, HTML, JavaScript, VBScript, PLSQL, Loadrunner.","title":"DELL"},{"location":"pages/cv/#developer-contract_22","text":"","title":"Developer (contract)"},{"location":"pages/cv/#informed-people-oxford","text":"February 2000 \u2013 August 2000 ASP, Visual Basic 6, XML, XSL, WML, SOAP, WAP, SQL Server 7, Oracle 8i, NT, HTML, VML, JavaScript, VBScript, PLSQL.","title":"Informed People (Oxford)"},{"location":"pages/cv/#developer-contract_23","text":"","title":"Developer (contract)"},{"location":"pages/cv/#bmw-gb","text":"July 1999 \u2013 February 2000 VB6, ASP, PL/SQL, MTS, ADO, XML, Windows NT, Oracle8, Access, COM, HTML.","title":"B.M.W. (GB)"},{"location":"pages/cv/#developer-contract_24","text":"","title":"Developer (contract)"},{"location":"pages/cv/#nortel-networks","text":"March 1999 \u2013 June 1999 VB6, VC++, HTML, ASP, Oracel8, PL/SQL, RDO, ADO, ActiveX, COM, Visual Modeller, FrontPage, Crystal Reports.","title":"Nortel Networks"},{"location":"pages/cv/#developer-contract_25","text":"","title":"Developer (contract)"},{"location":"pages/cv/#capital-one-nottingham","text":"September 1998 \u2013 February 1999 VB6, Visual C++, PL/SQL, Oracle 8, ADO, ActiveX, COM/DCOM, OOP, Windows 95, Windows NT.","title":"Capital One (Nottingham)"},{"location":"pages/cv/#developer-contract_26","text":"","title":"Developer (contract)"},{"location":"pages/cv/#ams-dusseldorf","text":"July 1998 \u2013 August 1998 VB5, Access, SourceSafe, HTML, MS Agent, Win 95.","title":"A.M.S. (Dusseldorf)"},{"location":"pages/cv/#developer-contract_27","text":"","title":"Developer (contract)"},{"location":"pages/cv/#powergen-coventry","text":"April 1997 \u2013 June 1998 VB5, PLSQL, RDO, SourceSafe, Crystal reports.","title":"PowerGen (Coventry)"},{"location":"pages/cv/#developer-contract_28","text":"","title":"Developer (contract)"},{"location":"pages/cv/#ws-atkins-newport","text":"January 1997 \u2013 March 1997 VB4, Oracle, SQL, ODBC API, RDO.","title":"WS Atkins (Newport)"},{"location":"pages/cv/#developer-contract_29","text":"","title":"Developer (contract)"},{"location":"pages/cv/#windsor-life-telford","text":"October 1996 \u2013 December 1996 VB4, Oracle, SQL, Access, PVCS, Word.","title":"Windsor Life (Telford)"},{"location":"pages/cv/#developer-contract_30","text":"","title":"Developer (contract)"},{"location":"pages/cv/#csc-cambridge","text":"February 1996 \u2013 September 1996 VB4, Access, OLE Automation, DDE, MS Project, OOP, SQL.","title":"C.S.C (Cambridge)"},{"location":"pages/cv/#developer-contract_31","text":"","title":"Developer (contract)"},{"location":"pages/cv/#british-gypsum","text":"January 1996 \u2013 February 1996 VAX COBOL, POWERHOUSE.","title":"British Gypsum"},{"location":"pages/cv/#developer-contract_32","text":"","title":"Developer (contract)"},{"location":"pages/cv/#arjo-wiggins","text":"May 1995 \u2013 December 1995 VAX COBOL, DECFORMS, FMS, SQL, Access.","title":"Arjo Wiggins"},{"location":"pages/cv/#developer-contract_33","text":"","title":"Developer (contract)"},{"location":"pages/cv/#anglia-water","text":"January 1995 \u2013 April 1995 Visual Basic, VAX COBOL, SQLModule.","title":"Anglia Water"},{"location":"pages/cv/#developer-contract_34","text":"","title":"Developer (contract)"},{"location":"pages/cv/#at-t-istel","text":"July 1994 \u2013 December 1994 DEC/VAX COBOL, POWERHOUSE.","title":"AT &amp; T ISTEL"},{"location":"pages/cv/#developer-contract_35","text":"","title":"Developer (contract)"},{"location":"pages/cv/#national-power","text":"March 1993 \u2013 June 1994 VAX COBOL, VAX C, SLGMS.","title":"National Power"},{"location":"pages/cv/#developer-contract_36","text":"","title":"Developer (contract)"},{"location":"pages/cv/#kpmg","text":"January 1993 \u2013 February 1993 VAX COBOL.","title":"KPMG"},{"location":"pages/cv/#developer-contract_37","text":"","title":"Developer (contract)"},{"location":"pages/cv/#modo-group","text":"July 1992 \u2013 December 1992 VAX COBOL, POWERHOUSE.","title":"MODO Group"},{"location":"pages/cv/#developer-contract_38","text":"","title":"Developer (contract)"},{"location":"pages/cv/#at-t-istel_1","text":"February 1991- June 1992 COBOL, POWERHOUSE.","title":"AT &amp; T ISTEL"},{"location":"pages/cv/#developer-permanent","text":"","title":"Developer (permanent)"},{"location":"pages/cv/#sovico-france","text":"August 1990 \u2013 January 1991 VAX COBOL, DCL.","title":"SOVICO (France)"},{"location":"pages/cv/#developer-contract_39","text":"","title":"Developer (contract)"},{"location":"pages/cv/#dec-france","text":"December 1989 \u2013 July 1990 VAX PASCAL,VAX BASIC, DCL, SQL.","title":"D.E.C. (France)"},{"location":"pages/cv/#developer-permanent_1","text":"","title":"Developer (permanent)"},{"location":"pages/cv/#thomas-cook","text":"May 1987 \u2013 December 1989 VAX BASIC, PRO IV, COBOL, DCL.","title":"Thomas Cook"},{"location":"pages/cv/#developer-permanent_2","text":"","title":"Developer (permanent)"},{"location":"pages/cv/#workstations-ltd","text":"February 1985 \u2013 May 1987 DATAFLEX.","title":"Workstations Ltd."},{"location":"pages/cv/#developer-permanent_3","text":"","title":"Developer (permanent)"},{"location":"pages/cv/#intec-ltd","text":"June 1984 \u2013 February 1985 BBC BASIC, 6502 Assembler.","title":"INTEC Ltd."},{"location":"pages/cv/#education","text":"","title":"Education"},{"location":"pages/cv/#norwich-city-college","text":"","title":"Norwich City College"},{"location":"pages/cv/#bec-tec-hnd-computer-studies","text":"september 1981 - June 1983","title":"BEC TEC HND Computer Studies"},{"location":"pages/cv/#king-edward-vii-upper-school","text":"A Levels, O Levels","title":"King Edward VII Upper School"},{"location":"pages/cv/#skills","text":"Programming Languages & Tools dotnet React Visual Studio Windows Angular JS Javascript SQL Server Atlassian Git html5 Personal Blog Twitter LinkedIn Stackoverflow MS Certification","title":"Skills"},{"location":"pages/cv/#awards-certifications","text":"","title":"Awards &amp; Certifications"}]}